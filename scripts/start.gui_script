--------------------------------------------------------------------------------
-- DEPENDENCIES
--------------------------------------------------------------------------------

local m_monarch = require "monarch.monarch"

--------------------------------------------------------------------------------
-- CONSTANTS
--------------------------------------------------------------------------------

local c_acquire_input_focus = hash("acquire_input_focus")

local c_selector = hash("selector")
local c_label = hash("label")
local c_inventory = hash("inventory")
local c_party = hash("party")
local c_terraglyphs = hash("terraglyphs")
local c_map = hash("map")
local c_records = hash("records")
local c_settings = hash("settings")
local c_save = hash("save")

local c_party = hash("party")

local c_key_left = hash("key_left")
local c_key_right = hash("key_right")
local c_key_z = hash("key_z")
local c_key_x = hash("key_x")
local c_key_enter = hash("key_enter")

local c_nodes =
{
	[1] = { id = c_inventory, name = "inventory" },
	[2] = { id = c_party, name = "party" },
	[3] = { id = c_terraglyphs, name = "terraglyphs" },
	[4] = { id = c_map, name = "map" },
	[5] = { id = c_records, name = "records" },
	[6] = { id = c_settings, name = "settings" },
	[7] = { id = c_save, name = "save" }
}

--------------------------------------------------------------------------------
-- PROPERTIES
--------------------------------------------------------------------------------

local p_node_index = 1

--------------------------------------------------------------------------------
-- LOCAL FUNCTIONS
--------------------------------------------------------------------------------

local function set_node_index(index)
	local previous_node = gui.get_node(c_nodes[p_node_index].id)
	gui.play_flipbook(previous_node, c_nodes[p_node_index].name .. "_idle")
	if index < 1 then
		p_node_index = #c_nodes
	elseif index > #c_nodes then
		p_node_index = 1
	else
		p_node_index = index
	end
	local next_node = gui.get_node(c_nodes[p_node_index].id)
	gui.play_flipbook(next_node, c_nodes[p_node_index].name .. "_active")
	local selector_node = gui.get_node(c_selector)
	gui.set_position(selector_node, gui.get_position(next_node))
	local label_node = gui.get_node(c_label)
	gui.set_text(label_node, string.gsub(c_nodes[p_node_index].name, "^%l", string.upper))
end

--------------------------------------------------------------------------------
-- ENGINE FUNCTIONS
--------------------------------------------------------------------------------

function init(self)
	msg.post(msg.url(), c_acquire_input_focus)
	set_node_index(1)
end

function on_input(self, action_id, action)
	if action.pressed then
		if action_id == c_key_z or action_id == c_key_enter then
			m_monarch.back()
		elseif action_id == c_key_x then
			if p_node_index == 1 then
				m_monarch.show(c_inventory)
			elseif p_node_index == 2 then
				m_monarch.show(c_party)
			end
		elseif action_id == c_key_left then
			set_node_index(p_node_index - 1)
		elseif action_id == c_key_right then
			set_node_index(p_node_index + 1)
		end
	end
end