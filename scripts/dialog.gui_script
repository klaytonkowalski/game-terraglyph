--------------------------------------------------------------------------------
-- DEPENDENCIES
--------------------------------------------------------------------------------

local m_dtypewriter = require "dtypewriter.dtypewriter"
local m_monarch = require "monarch.monarch"

--------------------------------------------------------------------------------
-- CONSTANTS
--------------------------------------------------------------------------------

local c_acquire_input_focus = hash("acquire_input_focus")

local c_unhook_command = hash("unhook_command")
local c_command_load_dialog = hash("command_load_dialog")
local c_command_start_dialog = hash("command_start_dialog")
local c_command_close_dialog = hash("command_close_dialog")

local c_monogram = hash("monogram")

local c_dialog_background = hash("dialog_background")
local c_spinner = hash("spinner")

local c_key_q = hash("key_q")
local c_key_e = hash("key_e")
local c_key_space = hash("key_space")

local c_main = hash("main")

--------------------------------------------------------------------------------
-- PROPERTIES
--------------------------------------------------------------------------------

local p_command_hook

--------------------------------------------------------------------------------
-- ENGINE FUNCTIONS
--------------------------------------------------------------------------------

function init(self)
	msg.post(msg.url(), c_acquire_input_focus)
	m_dtypewriter.init(c_dialog_background, c_monogram, 5, 1, 226, 3, 2, msg.url())
	m_dtypewriter.set_default_type_speed(45)
end

function on_input(self, action_id, action)
	if action.pressed then
		if action_id == c_key_q or action_id == c_key_e or action_id == c_key_space then
			if m_dtypewriter.is_waiting() then
				m_dtypewriter.continue()
			elseif m_dtypewriter.is_complete() then
				if p_command_hook then
					msg.post(msg.url(c_main, hash("/event"), "script"), c_unhook_command, { hook = p_command_hook })
					p_command_hook = nil
				end
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == m_dtypewriter.messages.start then
		gui.set_enabled(gui.get_node(c_dialog_background), true)
	elseif message_id == m_dtypewriter.messages.type then
	elseif message_id == m_dtypewriter.messages.wait then
		gui.set_enabled(gui.get_node(c_spinner), true)
	elseif message_id == m_dtypewriter.messages.continue then
		gui.set_enabled(gui.get_node(c_spinner), false)
	elseif message_id == m_dtypewriter.messages.complete then
		gui.set_enabled(gui.get_node(c_spinner), true)
	elseif message_id == c_command_load_dialog then
		m_dtypewriter.load(message.text)
	elseif message_id == c_command_start_dialog then
		m_dtypewriter.start()
		p_command_hook = message.hook
	elseif message_id == c_command_close_dialog then
		gui.set_enabled(gui.get_node(c_dialog_background), false)
		gui.set_enabled(gui.get_node(c_spinner), false)
		m_dtypewriter.clear()
		m_monarch.back()
	end
end