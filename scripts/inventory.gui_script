local h_str = require "modules.h_str"
local item_data = require "modules.item_data"
local persist = require "modules.persist"
local dcolors = require "dcolors.dcolors"
local dtypewriter = require "dtypewriter.dtypewriter"
local monarch = require "monarch.monarch"

local _state_inventory = hash("inventory")
local _state_action = hash("action")
local _state_party = hash("party")

local _state = _state_inventory

local _inventory_index = 1
local _inventory = {}

local _action_index = 1
local _action_ids = {}

local _party_index = 1
local _party_ids = {}
local _party = {}

local function load_inventory()
	_inventory = persist.get_inventory()
	for index, data in ipairs(_inventory) do
		if data then
			local item_node = gui.get_node(hash("node_item_" .. index))
			gui.set_enabled(item_node, true)
			gui.play_flipbook(item_node, data.key .. "_idle")
		end
	end
end

local function load_party()
	_party = persist.get_party()
	for index, data in ipairs(_party) do
		if data then
			_party_ids[#_party_ids + 1] = hash("node_party_" .. index)
			local party_node = gui.get_node(_party_ids[#_party_ids])
			gui.set_text(party_node, data.name)
		end
	end
end

local function toggle_action_background(flag)
	local node_action_background = gui.get_node(h_str.node_action_background)
	gui.set_enabled(node_action_background, flag)
	if flag then
		_action_index = 1
		_action_ids = {}
		local node_use = gui.get_node(h_str.node_use)
		local node_equip = gui.get_node(h_str.node_equip)
		local node_consume = gui.get_node(h_str.node_consume)
		local node_drop = gui.get_node(h_str.node_drop)
		gui.set_color(node_use, dcolors.palette.brown_3)
		gui.set_color(node_equip, dcolors.palette.brown_3)
		gui.set_color(node_equip, dcolors.palette.brown_3)
		gui.set_color(node_equip, dcolors.palette.brown_3)
		local data = item_data[_inventory[_inventory_index].key]
		if data.use then
			gui.set_color(node_use, dcolors.palette.brown_4)
			_action_ids[#_action_ids + 1] = h_str.node_use
		end
		if data.equip then
			gui.set_color(node_equip, dcolors.palette.brown_4)
			_action_ids[#_action_ids + 1] = h_str.node_equip
		end
		if data.consume then
			gui.set_color(node_consume, dcolors.palette.brown_4)
			_action_ids[#_action_ids + 1] = h_str.node_consume
		end
		if data.drop then
			gui.set_color(node_drop, dcolors.palette.brown_4)
			_action_ids[#_action_ids + 1] = h_str.node_drop
		end
	end
end

local function toggle_party_background(flag)
	local node_party_background = gui.get_node(h_str.node_party_background)
	gui.set_enabled(node_party_background, flag)
	if flag then
		_party_index = 1
		local node_party_x = gui.get_node(hash("node_party_" .. _party_index))
		gui.set_color(node_party_x, dcolors.palette.brown_4)
	end
end

local function toggle_stats_background(flag)
	local node_stats_background = gui.get_node(h_str.node_stats_background)
	gui.set_enabled(node_stats_background, flag)
	if flag then
		local player = _party[_party_index]
		local node_health_stats = gui.get_node(h_str.node_health_stats)
		local health_stats = player.health_total .. "/" .. player.health_equipment .. "/" .. player.health_level
		gui.set_text(node_health_stats, health_stats)
		local node_strength_stats = gui.get_node(h_str.node_strength_stats)
		local strength_stats = player.strength_total .. "/" .. player.strength_equipment .. "/" .. player.strength_level
		gui.set_text(node_strength_stats, strength_stats)
		local node_defense_stats = gui.get_node(h_str.node_defense_stats)
		local defense_stats = player.defense_total .. "/" .. player.defense_equipment .. "/" .. player.defense_level
		gui.set_text(node_defense_stats, defense_stats)
		local node_agility_stats = gui.get_node(h_str.node_agility_stats)
		local agility_stats = player.agility_total .. "/" .. player.agility_equipment .. "/" .. player.agility_level
		gui.set_text(node_agility_stats, agility_stats)
		local node_wonder_stats = gui.get_node(h_str.node_wonder_stats)
		local wonder_stats = player.wonder_total .. "/" .. player.wonder_equipment .. "/" .. player.wonder_level
		gui.set_text(node_wonder_stats, wonder_stats)
		local node_terra_stats = gui.get_node(h_str.node_terra_stats)
		local terra_stats = player.terra_total .. "/" .. player.terra_equipment .. "/" .. player.terra_level
		gui.set_text(node_terra_stats, terra_stats)
		local item = item_data[_inventory[_inventory_index].key]
		local node_health_delta = gui.get_node(h_str.node_health_delta)
		gui.set_text(node_health_delta, item.bonus_health > 0 and "+" .. item.bonus_health or item.bonus_health)
		gui.set_color(node_health_delta, item.bonus_health == 0 and dcolors.palette.brown_4 or (item.bonus_health > 0 and dcolors.palette.green or dcolors.palette.red))
		local node_strength_delta = gui.get_node(h_str.node_strength_delta)
		gui.set_text(node_strength_delta, item.bonus_strength > 0 and "+" .. item.bonus_strength or item.bonus_strength)
		gui.set_color(node_strength_delta, item.bonus_strength == 0 and dcolors.palette.brown_4 or (item.bonus_strength > 0 and dcolors.palette.green or dcolors.palette.red))
		local node_defense_delta = gui.get_node(h_str.node_defense_delta)
		gui.set_text(node_defense_delta, item.bonus_defense > 0 and "+" .. item.bonus_defense or item.bonus_defense)
		gui.set_color(node_defense_delta, item.bonus_defense == 0 and dcolors.palette.brown_4 or (item.bonus_defense > 0 and dcolors.palette.green or dcolors.palette.red))
		local node_agility_delta = gui.get_node(h_str.node_agility_delta)
		gui.set_text(node_agility_delta, item.bonus_agility > 0 and "+" .. item.bonus_agility or item.bonus_agility)
		gui.set_color(node_agility_delta, item.bonus_agility == 0 and dcolors.palette.brown_4 or (item.bonus_agility > 0 and dcolors.palette.green or dcolors.palette.red))
		local node_wonder_delta = gui.get_node(h_str.node_wonder_delta)
		gui.set_text(node_wonder_delta, item.bonus_wonder > 0 and "+" .. item.bonus_wonder or item.bonus_wonder)
		gui.set_color(node_wonder_delta, item.bonus_wonder == 0 and dcolors.palette.brown_4 or (item.bonus_wonder > 0 and dcolors.palette.green or dcolors.palette.red))
		local node_terra_delta = gui.get_node(h_str.node_terra_delta)
		gui.set_text(node_terra_delta, item.bonus_terra > 0 and "+" .. item.bonus_terra or item.bonus_terra)
		gui.set_color(node_terra_delta, item.bonus_terra == 0 and dcolors.palette.brown_4 or (item.bonus_terra > 0 and dcolors.palette.green or dcolors.palette.red))
	end
end

local function select_inventory_index(index)
	if _inventory[_inventory_index] then
		gui.play_flipbook(gui.get_node(hash("node_item_" .. _inventory_index)), _inventory[_inventory_index].key .. "_idle")
		dtypewriter.clear()
	end
	if index < 1 then
		_inventory_index = #_inventory + index
	elseif index > #_inventory then
		_inventory_index = index - #_inventory
	else
		_inventory_index = index
	end
	local next_node = gui.get_node(hash("node_item_" .. _inventory_index))
	if _inventory[_inventory_index] then
		local next_inventory_data = _inventory[_inventory_index]
		local next_item_data = item_data[next_inventory_data.key]
		gui.play_flipbook(next_node, next_inventory_data.key .. "_active")
		dtypewriter.load(next_item_data.description)
		dtypewriter.start()
	end
	local selector_node = gui.get_node(h_str.node_selector_1)
	gui.set_position(selector_node, gui.get_position(next_node))
end

local function select_action_index(index)
	local previous_node = gui.get_node(_action_ids[_action_index])
	gui.set_color(previous_node, dcolors.palette.brown_4)
	if index < 1 then
		_action_index = #_action_ids + index
	elseif index > #_action_ids then
		_action_index = index - #_action_ids
	else
		_action_index = index
	end
	local next_node = gui.get_node(_action_ids[_action_index])
	gui.set_color(next_node, dcolors.palette.brown_1)
end

local function select_party_index(index)
	local previous_node = gui.get_node(_party_ids[_party_index])
	gui.set_color(previous_node, dcolors.palette.brown_4)
	if index < 1 then
		_party_index = #_party_ids + index
	elseif index > #_party_ids then
		_party_index = index - #_party_ids
	else
		_party_index = index
	end
	local next_node = gui.get_node(_party_ids[_party_index])
	gui.set_color(next_node, dcolors.palette.brown_1)
	toggle_stats_background(true)
end

function init(self)
	msg.post(msg.url(), h_str.acquire_input_focus)
	dtypewriter.init(h_str.node_dialog_background, h_str.font_monogram, 5, 1, 226, 3, 2, msg.url())
	dtypewriter.set_default_type_speed(0)
	load_inventory()
	load_party()
	select_inventory_index(1)
end

function on_input(self, action_id, action)
	if action.pressed then
		if _state == _state_inventory then
			if action_id == h_str.key_up then
				select_inventory_index(_inventory_index - 3)
			elseif action_id == h_str.key_left then
				select_inventory_index(_inventory_index % 3 == 1 and _inventory_index + 2 or _inventory_index - 1)
			elseif action_id == h_str.key_down then
				select_inventory_index(_inventory_index + 3)
			elseif action_id == h_str.key_right then
				select_inventory_index(_inventory_index % 3 == 0 and _inventory_index - 2 or _inventory_index + 1)
			elseif action_id == h_str.key_z then
				dtypewriter.clear()
				monarch.back()
			elseif action_id == h_str.key_x then
				if _inventory[_inventory_index] then
					_state = _state_action
					toggle_action_background(true)
					select_action_index(1)
				end
			end
		elseif _state == _state_action then
			if action_id == h_str.key_up then
				select_action_index(_action_index - 1)
			elseif action_id == h_str.key_down then
				select_action_index(_action_index + 1)
			elseif action_id == h_str.key_z then
				_state = _state_inventory
				toggle_action_background(false)
			elseif action_id == h_str.key_x then
				if _action_ids[_action_index] == h_str.node_use then
					-- todo
				elseif _action_ids[_action_index] == h_str.node_equip then
					_state = _state_party
					toggle_party_background(true)
					select_party_index(1)
				elseif _action_ids[_action_index] == h_str.node_consume then
					_state = _state_party
					toggle_party_background(true)
					select_party_index(1)
				elseif _action_ids[_action_index] == h_str.node_drop then
					-- todo
				end
			end
		elseif _state == _state_party then
			if action_id == h_str.key_up then
				select_party_index(_party_index - 1)
			elseif action_id == h_str.key_down then
				select_party_index(_party_index + 1)
			elseif action_id == h_str.key_z then
				_state = _state_action
				toggle_party_background(false)
				toggle_stats_background(false)
			elseif action_id == h_str.key_x then
				-- todo
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	
end