local h_str = require "modules.h_str"
local item_data = require "modules.item_data"
local persist = require "modules.persist"
local dtypewriter = require "dtypewriter.dtypewriter"
local monarch = require "monarch.monarch"

local _inventory_index = 1
local _inventory = {}

local color_disabled = vmath.vector4(143 / 255, 112 / 255, 59 / 255, 1)
local color_enabled = vmath.vector4(78 / 255, 66 / 255, 45 / 255, 1)
local color_selected = vmath.vector4(210 / 255, 187 / 255, 147 / 255, 1)

local function check_item(index)
	return _inventory[index].name ~= "" and _inventory[index].count > 0
end

local function load_inventory()
	_inventory = persist.get_inventory()
	for index, data in ipairs(_inventory) do
		if check_item(index) then
			local node = gui.get_node(hash("node_item_" .. index))
			gui.set_enabled(node, true)
			gui.play_flipbook(node, data.name .. "_idle")
		end
	end
end

local function select_inventory_index(index)
	local node_use = gui.get_node(h_str.node_use)
	local node_equip = gui.get_node(h_str.node_equip)
	local node_consume = gui.get_node(h_str.node_consume)
	local node_drop = gui.get_node(h_str.node_drop)
	gui.set_color(node_consume, color_disabled)
	gui.set_color(node_use, color_disabled)
	gui.set_color(node_equip, color_disabled)
	gui.set_color(node_drop, color_disabled)
	if check_item(_inventory_index) then
		gui.play_flipbook(gui.get_node(hash("node_item_" .. _inventory_index)), _inventory[_inventory_index].name .. "_idle")
		dtypewriter.clear()
	end
	if index < 1 then
		_inventory_index = #_inventory + index
	elseif index > #_inventory then
		_inventory_index = index % #_inventory
	else
		_inventory_index = index
	end
	local next_node = gui.get_node(hash("node_item_" .. _inventory_index))
	if check_item(_inventory_index) then
		local next_inventory_data = _inventory[_inventory_index]
		local next_item_data = item_data.data[next_inventory_data.name]
		gui.play_flipbook(next_node, next_inventory_data.name .. "_active")
		dtypewriter.load(next_item_data.description)
		dtypewriter.start()
		if next_item_data.use then
			gui.set_color(node_use, color_enabled)
		end
		if next_item_data.equip then
			gui.set_color(node_equip, color_enabled)
		end
		if next_item_data.consume then
			gui.set_color(node_consume, color_enabled)
		end
		if next_item_data.drop then
			gui.set_color(node_drop, color_enabled)
		end
	end
	local selector_node = gui.get_node(h_str.node_selector)
	gui.set_position(selector_node, gui.get_position(next_node))
end

function init(self)
	msg.post(msg.url(), h_str.acquire_input_focus)
	dtypewriter.init(h_str.node_dialog_background, h_str.font_monogram, 7, 1, 226, 3, 2, msg.url())
	dtypewriter.set_default_type_speed(0)
	load_inventory()
	select_inventory_index(1)
end

function on_input(self, action_id, action)
	if action.pressed then
		if action_id == h_str.key_up then
			select_inventory_index(_inventory_index - 4)
		elseif action_id == h_str.key_left then
			select_inventory_index(_inventory_index % 4 == 1 and _inventory_index + 3 or _inventory_index - 1)
		elseif action_id == h_str.key_down then
			select_inventory_index(_inventory_index + 4)
		elseif action_id == h_str.key_right then
			select_inventory_index(_inventory_index % 4 == 0 and _inventory_index - 3 or _inventory_index + 1)
		elseif action_id == h_str.key_z then
			dtypewriter.clear()
			monarch.back()
		end
	end
end

function on_message(self, message_id, message, sender)
	
end