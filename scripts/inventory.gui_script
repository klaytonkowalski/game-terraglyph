local h_str = require "modules.h_str"
local item_data = require "modules.item_data"
local persist = require "modules.persist"
local dcolors = require "dcolors.dcolors"
local dtypewriter = require "dtypewriter.dtypewriter"
local monarch = require "monarch.monarch"

local _state_inventory = hash("inventory")
local _state_action = hash("action")
local _state_party = hash("party")

local _state = _state_inventory

local _inventory_index = 1
local _inventory = {}

local _action_index = 1
local _action_ids = {}

local _party_index = 1
local _party_ids = {}
local _party = {}

local function load_inventory()
	_inventory = persist.get_inventory()
	for index, data in ipairs(_inventory) do
		if data then
			local item_node = gui.get_node(hash("node_item_" .. index))
			gui.set_enabled(item_node, true)
			gui.play_flipbook(item_node, data.key .. "_idle")
		end
	end
end

local function load_party()
	_party = persist.get_party()
	for index, data in ipairs(_party) do
		if data then
			_party_ids[#_party_ids + 1] = hash("node_party_" .. index)
			local party_node = gui.get_node(_party_ids[#_party_ids])
			gui.set_text(party_node, data.name)
		end
	end
end

local function get_item_dialog(item)
	return "<color=item>" .. item.name .. "<color=default><line>" .. item.description
end

local function calculate_equipment_stats(player)
	local result =
	{
		totals = { health = 0, strength = 0, defense = 0, agility = 0, wonder = 0, terra = 0 },
		hands = { health = 0, strength = 0, defense = 0, agility = 0, wonder = 0, terra = 0 },
		head = { health = 0, strength = 0, defense = 0, agility = 0, wonder = 0, terra = 0 },
		torso = { health = 0, strength = 0, defense = 0, agility = 0, wonder = 0, terra = 0 },
		trunk = { health = 0, strength = 0, defense = 0, agility = 0, wonder = 0, terra = 0 },
		feet = { health = 0, strength = 0, defense = 0, agility = 0, wonder = 0, terra = 0 },
		ring = { health = 0, strength = 0, defense = 0, agility = 0, wonder = 0, terra = 0 },
		bracelet = { health = 0, strength = 0, defense = 0, agility = 0, wonder = 0, terra = 0 },
		necklace = { health = 0, strength = 0, defense = 0, agility = 0, wonder = 0, terra = 0 }
	}
	for _, category in ipairs({ "hands", "head", "torso", "trunk", "feet", "ring", "bracelet", "necklace" }) do
		local item_key = player[category .. "_key"]
		if item_key then
			local item = item_data[item_key]
			for _, stat in ipairs({ "health", "strength", "defense", "agility", "wonder", "terra" }) do
				result.totals[stat] = result.totals[stat] + item[stat]
				result[category][stat] = result[category][stat] + item[stat]
			end
		end
	end
	return result
end

local function refresh_stats_background()
	local item = item_data[_inventory[_inventory_index].key]
	local player = _party[_party_index]
	local equipment_stats = calculate_equipment_stats(player)
	for _, stat in ipairs({ "health", "strength", "defense", "agility", "wonder", "terra" }) do
		local x_total_node = gui.get_node(h_str["node_" .. stat .. "_total"])
		local x_total_string = equipment_stats.totals[stat] + player[stat]
		gui.set_text(x_total_node, x_total_string)
		local x_equipment_node = gui.get_node(h_str["node_" .. stat .. "_equipment"])
		local x_equipment_string =  equipment_stats.totals[stat]
		gui.set_text(x_equipment_node, x_equipment_string)
		local x_level_node = gui.get_node(h_str["node_" .. stat .. "_level"])
		local x_level_string =  player[stat]
		gui.set_text(x_level_node, x_level_string)
		local x_delta_node = gui.get_node(h_str["node_" .. stat .. "_delta"])
		local x_delta_value = item[stat] - equipment_stats[item.category][stat]
		gui.set_text(x_delta_node, x_delta_value > 0 and "+" .. x_delta_value or x_delta_value)
		gui.set_color(x_delta_node, x_delta_value == 0 and dcolors.palette.brown_4 or (x_delta_value > 0 and dcolors.palette.green or dcolors.palette.red))
	end
	for _, category in ipairs({ "hands", "head", "torso", "trunk", "feet", "ring", "bracelet", "necklace" }) do
		local x_node = gui.get_node(h_str["node_" .. category])
		if player[category .. "_key"] then
			gui.set_enabled(x_node, true)
			if item.category == category then
				gui.play_flipbook(x_node, player[category .. "_key"] .. "_active")
				local player_item_name = item_data[player[category .. "_key"]].name
				dtypewriter.load("Equip <color=item>" .. item.name .. "<color=default> and unequip <color=item>" .. player_item_name .. "<color=default>?")
			else
				gui.play_flipbook(x_node, player[category .. "_key"] .. "_idle")
			end
		else
			gui.set_enabled(x_node, false)
		end
	end
	if not dtypewriter.is_loaded() then
		dtypewriter.load("Equip <color=item>" .. item.name .. "<color=default>?")
	end
	dtypewriter.start()
	local node_selector = gui.get_node(h_str.node_selector_2)
	local node_selectee = gui.get_node(hash("node_" .. item.category))
	local selector_position = gui.get_position(node_selectee)
	gui.set_position(node_selector, selector_position)
end

local function check_equipable(player, item)
	return player.health >= item.require_health and player.strength >= item.require_strength and player.defense >= item.require_defense and player.agility >= item.require_agility and player.wonder >= item.require_wonder and player.terra >= item.require_terra
end

local function select_inventory_index(index)
	if _inventory[_inventory_index] then
		gui.play_flipbook(gui.get_node(hash("node_item_" .. _inventory_index)), _inventory[_inventory_index].key .. "_idle")
		dtypewriter.clear()
	end
	if index < 1 then
		_inventory_index = #_inventory + index
	elseif index > #_inventory then
		_inventory_index = index - #_inventory
	else
		_inventory_index = index
	end
	local next_node = gui.get_node(hash("node_item_" .. _inventory_index))
	if _inventory[_inventory_index] then
		local next_inventory_data = _inventory[_inventory_index]
		local next_item_data = item_data[next_inventory_data.key]
		gui.play_flipbook(next_node, next_inventory_data.key .. "_active")
		local next_item_dialog = get_item_dialog(next_item_data)
		dtypewriter.load(next_item_dialog)
		dtypewriter.start()
	end
	local selector_node = gui.get_node(h_str.node_selector_1)
	gui.set_position(selector_node, gui.get_position(next_node))
end

local function select_action_index(index)
	local previous_node = gui.get_node(_action_ids[_action_index])
	gui.set_color(previous_node, dcolors.palette.brown_4)
	if index < 1 then
		_action_index = #_action_ids + index
	elseif index > #_action_ids then
		_action_index = index - #_action_ids
	else
		_action_index = index
	end
	local next_node = gui.get_node(_action_ids[_action_index])
	gui.set_color(next_node, dcolors.palette.brown_1)
end

local function select_party_index(index)
	local previous_node = gui.get_node(_party_ids[_party_index])
	gui.set_color(previous_node, dcolors.palette.brown_4)
	if index < 1 then
		_party_index = #_party_ids + index
	elseif index > #_party_ids then
		_party_index = index - #_party_ids
	else
		_party_index = index
	end
	local next_node = gui.get_node(_party_ids[_party_index])
	gui.set_color(next_node, dcolors.palette.brown_1)
	refresh_stats_background()
end

local function toggle_action_background(flag)
	local node_action_background = gui.get_node(h_str.node_action_background)
	gui.set_enabled(node_action_background, flag)
	if flag then
		_action_ids = {}
		local node_use = gui.get_node(h_str.node_use)
		gui.set_color(node_use, dcolors.palette.brown_3)
		local node_equip = gui.get_node(h_str.node_equip)
		gui.set_color(node_equip, dcolors.palette.brown_3)
		local node_consume = gui.get_node(h_str.node_consume)
		gui.set_color(node_consume, dcolors.palette.brown_3)
		local node_drop = gui.get_node(h_str.node_drop)
		gui.set_color(node_drop, dcolors.palette.brown_3)
		local data = item_data[_inventory[_inventory_index].key]
		if data.use then
			gui.set_color(node_use, dcolors.palette.brown_4)
			_action_ids[#_action_ids + 1] = h_str.node_use
		end
		if data.equip then
			gui.set_color(node_equip, dcolors.palette.brown_4)
			_action_ids[#_action_ids + 1] = h_str.node_equip
		end
		if data.consume then
			gui.set_color(node_consume, dcolors.palette.brown_4)
			_action_ids[#_action_ids + 1] = h_str.node_consume
		end
		if data.drop then
			gui.set_color(node_drop, dcolors.palette.brown_4)
			_action_ids[#_action_ids + 1] = h_str.node_drop
		end
		select_action_index(1)
	end
end

local function toggle_party_background(flag)
	local node_party_background = gui.get_node(h_str.node_party_background)
	gui.set_enabled(node_party_background, flag)
	if flag then
		local node_party_x = gui.get_node(hash("node_party_" .. _party_index))
		gui.set_color(node_party_x, dcolors.palette.brown_4)
		select_party_index(1)
	end
end

local function toggle_stats_background(flag)
	local node_stats_background = gui.get_node(h_str.node_stats_background)
	gui.set_enabled(node_stats_background, flag)
	if flag then
		refresh_stats_background()
	else
		local item = item_data[_inventory[_inventory_index].key]
		local item_dialog = get_item_dialog(item)
		dtypewriter.load(item_dialog)
		dtypewriter.start()
	end
end

local function on_input_dtypewriter(action_id)
	if action_id == h_str.key_lctrl then
		if dtypewriter.is_waiting() then
			dtypewriter.continue()
		elseif dtypewriter.is_complete() then
			local item = item_data[_inventory[_inventory_index].key]
			local item_dialog = get_item_dialog(item)
			dtypewriter.load(item_dialog)
			dtypewriter.start()
		end
	end
end

function init(self)
	msg.post(msg.url(), h_str.acquire_input_focus)
	dtypewriter.init(h_str.node_dialog_background, h_str.font_monogram, 5, 1, 226, 3, 2, msg.url())
	load_inventory()
	load_party()
	select_inventory_index(1)
end

function on_input(self, action_id, action)
	if action.pressed then
		if _state == _state_inventory then
			on_input_dtypewriter(action_id)
			if action_id == h_str.key_up then
				select_inventory_index(_inventory_index - 3)
			elseif action_id == h_str.key_left then
				select_inventory_index(_inventory_index % 3 == 1 and _inventory_index + 2 or _inventory_index - 1)
			elseif action_id == h_str.key_down then
				select_inventory_index(_inventory_index + 3)
			elseif action_id == h_str.key_right then
				select_inventory_index(_inventory_index % 3 == 0 and _inventory_index - 2 or _inventory_index + 1)
			elseif action_id == h_str.key_z then
				dtypewriter.clear()
				monarch.back()
			elseif action_id == h_str.key_x then
				if _inventory[_inventory_index] then
					_state = _state_action
					toggle_action_background(true)
				end
			end
		elseif _state == _state_action then
			on_input_dtypewriter(action_id)
			if action_id == h_str.key_up then
				select_action_index(_action_index - 1)
			elseif action_id == h_str.key_down then
				select_action_index(_action_index + 1)
			elseif action_id == h_str.key_z then
				_state = _state_inventory
				toggle_action_background(false)
			elseif action_id == h_str.key_x then
				if _action_ids[_action_index] == h_str.node_use then
					-- todo
				elseif _action_ids[_action_index] == h_str.node_equip then
					_state = _state_party
					toggle_party_background(true)
					toggle_stats_background(true)
					gui.set_enabled(gui.get_node(h_str.node_spinner), false)
				elseif _action_ids[_action_index] == h_str.node_consume then
					_state = _state_party
					toggle_party_background(true)
					gui.set_enabled(gui.get_node(h_str.node_spinner), false)
				elseif _action_ids[_action_index] == h_str.node_drop then
					-- todo
				end
			end
		elseif _state == _state_party then
			if action_id == h_str.key_up then
				select_party_index(_party_index - 1)
			elseif action_id == h_str.key_down then
				select_party_index(_party_index + 1)
			elseif action_id == h_str.key_z then
				_state = _state_action
				toggle_party_background(false)
				toggle_stats_background(false)
			elseif action_id == h_str.key_x then
				-- todo
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if _state == _state_inventory or _state == _state_action then
		if message_id == dtypewriter.messages.start then
			gui.set_enabled(gui.get_node(h_str.node_spinner), false)
		elseif message_id == dtypewriter.messages.wait then
			gui.set_enabled(gui.get_node(h_str.node_spinner), true)
		elseif message_id == dtypewriter.messages.continue then
			gui.set_enabled(gui.get_node(h_str.node_spinner), false)
		elseif message_id == dtypewriter.messages.complete then
			gui.set_enabled(gui.get_node(h_str.node_spinner), true)
		elseif message_id == dtypewriter.messages.clear then
			gui.set_enabled(gui.get_node(h_str.node_spinner), false)
		end
	end
end