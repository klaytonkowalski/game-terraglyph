local h_str = require "modules.h_str"
local persist = require "modules.persist"
local dtile_animation_groups = require "modules.dtile_animation_groups"
local dgrid = require "dgrid.dgrid"
local dtile = require "dtile.dtile"

local map_objects

local function get_collision_data(tilemap_url, tilemap_x, tilemap_y, tilemap_width, tilemap_height)
	local collision_data = {}
	for y = tilemap_height, 1, -1 do
		collision_data[#collision_data + 1] = {}
		for x = 1, tilemap_width do
			collision_data[#collision_data][x] = tilemap.get_tile(tilemap_url, h_str.layer_collision, x, y) - 248
		end
	end
	return collision_data
end

function init(self)
	dgrid.set_tile_dimensions(16, 16)
	local continue_data = persist.get_continue_data()
	map_objects = collectionfactory.create(msg.url(nil, hash("/factory_overworld"), "collectionfactory_map_" .. continue_data.map_id))
	local tilemap_url = msg.url(nil, map_objects[hash("/tilemap")], "tilemap")
	local tilemap_x, tilemap_y, tilemap_width, tilemap_height = tilemap.get_bounds(tilemap_url)
	dgrid.set_map_dimensions(tilemap_width, tilemap_height)
	local collision_data = get_collision_data(tilemap_url, tilemap_x, tilemap_y, tilemap_width, tilemap_height)
	dgrid.set_map_tags(collision_data)
	go.set_parent(hash("/camera_overworld"), map_objects[hash("/player")])
	dtile.init(dtile_animation_groups[1], tilemap_url, { h_str.layer_terrain, h_str.layer_object, h_str.layer_effect, h_str.layer_canopy })
	msg.post(msg.url(nil, map_objects[hash("/controller")], "script"), h_str.message_set_receiver, { id = map_objects[hash("/player")] })
end

function update(self, dt)
	dgrid.update(dt)
end