--------------------------------------------------------------------------------
-- DEPENDENCIES
--------------------------------------------------------------------------------

local m_monarch = require "monarch.monarch"

--------------------------------------------------------------------------------
-- CONSTANTS
--------------------------------------------------------------------------------

local c_command_lock = hash("command_lock")
local c_command_unlock = hash("command_unlock")
local c_command_pause = hash("command_pause")
local c_command_wait = hash("command_wait")
local c_command_load_dialog = hash("command_load_dialog")
local c_command_start_dialog = hash("command_start_dialog")
local c_command_close_dialog = hash("command_close_dialog")

local c_overworld = hash("overworld")
local c_dialog = hash("dialog")

local c_trigger_event = hash("trigger_event")
local c_unhook_command = hash("unhook_command")

--------------------------------------------------------------------------------
-- PROPERTIES
--------------------------------------------------------------------------------

local p_event_id
local p_coroutine
local p_instruction

local p_hooks = {}

--------------------------------------------------------------------------------
-- LOCAL FUNCTIONS
--------------------------------------------------------------------------------

local function command_lock(arguments)
	msg.post(msg.url(c_overworld, hash("/overworld"), "script"), c_command_lock, { id = hash("/" .. arguments.id) })
end

local function command_unlock(arguments)
	msg.post(msg.url(c_overworld, hash("/overworld"), "script"), c_command_unlock, { id = hash("/" .. arguments.id) })
end

local function command_pause(arguments)
	local complete = false
	timer.delay(arguments.duration, false, function()
		complete = true
	end)
	while not complete do
		coroutine.yield()
	end
end

local function command_wait(arguments)
	while p_hooks[arguments.hook] do
		coroutine.yield()
	end
end

local function command_load_dialog(arguments)
	local collection_ready = false
	m_monarch.show(c_dialog, nil, nil, function()
		collection_ready = true
	end)
	while not collection_ready do
		coroutine.yield()
	end
	msg.post(msg.url(c_dialog, hash("/dialog"), "gui"), c_command_load_dialog, { text = arguments.text })
end

local function command_start_dialog(arguments)
	msg.post(msg.url(c_dialog, hash("/dialog"), "gui"), c_command_start_dialog, { hook = arguments.hook })
end

local function command_close_dialog(arguments)
	msg.post(msg.url(c_dialog, hash("/dialog"), "gui"), c_command_close_dialog)
end

local p_commands =
{
	lock = command_lock,
	unlock = command_unlock,
	pause = command_pause,
	wait = command_wait,
	load_dialog = command_load_dialog,
	start_dialog = command_start_dialog,
	close_dialog = command_close_dialog
}

local function process()
	local path = "/assets/events/event_" .. p_event_id .. ".json"
	local json_string = sys.load_resource(path)
	if json_string then
		local lua_table = json.decode(json_string)
		if lua_table then
			p_instruction = 1
			while p_instruction <= #lua_table do
				local cmd = lua_table[p_instruction].cmd
				local args = lua_table[p_instruction].args
				if args and args.hook then
					p_hooks[args.hook] = true
				end
				p_commands[cmd](args)
				p_instruction = p_instruction + 1
			end
		end
	end
end

--------------------------------------------------------------------------------
-- ENGINE UPDATES
--------------------------------------------------------------------------------

function update(self, dt)
	if p_coroutine then
		coroutine.resume(p_coroutine)
		if coroutine.status(p_coroutine) == "dead" then
			p_event_id = nil
			p_coroutine = nil
			p_instruction = nil
			p_hooks = {}
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == c_trigger_event then
		if not p_coroutine then
			p_event_id = message.id
			p_coroutine = coroutine.create(process)
		end
	elseif message_id == c_unhook_command then
		p_hooks[message.hook] = nil
	end
end