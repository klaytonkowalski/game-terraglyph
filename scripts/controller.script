--------------------------------------------------------------------------------
-- DEPENDENCIES
--------------------------------------------------------------------------------

local m_dgrid = require "dgrid.dgrid"
local m_monarch = require "monarch.monarch"

--------------------------------------------------------------------------------
-- CONSTANTS
--------------------------------------------------------------------------------

local c_walk_speed = 3
local c_run_speed = 6

local c_acquire_input_focus = hash("acquire_input_focus")

local c_trigger_event = hash("trigger_event")
local c_set_receiver = hash("set_receiver")

local c_key_up = hash("key_up")
local c_key_left = hash("key_left")
local c_key_down = hash("key_down")
local c_key_right = hash("key_right")
local c_key_z = hash("key_z")
local c_key_x = hash("key_x")
local c_key_enter = hash("key_enter")
local c_key_lctrl = hash("key_lctrl")

local c_start = hash("start")

--------------------------------------------------------------------------------
-- PROPERTIES
--------------------------------------------------------------------------------

local p_receiver_id

local p_input =
{
	key_up = false,
	key_left = false,
	key_down = false,
	key_right = false,
	key_x = false,
	key_lctrl = false
}

--------------------------------------------------------------------------------
-- LOCAL FUNCTIONS
--------------------------------------------------------------------------------

local function get_input_direction()
	return p_input.key_up or p_input.key_left or p_input.key_down or p_input.key_right
end

local function interact()
	local interaction = m_dgrid.interact(p_receiver_id)
	if interaction and interaction.tile_data.event_id then
		msg.post(msg.url("main", hash("/event"), "script"), c_trigger_event, { id = interaction.tile_data.event_id })
	end
end

--------------------------------------------------------------------------------
-- ENGINE FUNCTIONS
--------------------------------------------------------------------------------

function init(self)
	msg.post(msg.url(), c_acquire_input_focus)
end

function update(self, dt)
	if not m_dgrid.is_entity_moving(p_receiver_id) then
		local input_direction = get_input_direction()
		if input_direction then
			if p_input.key_lctrl then
				m_dgrid.turn(p_receiver_id, input_direction)
			else
				m_dgrid.move(p_receiver_id, p_input.key_z and c_run_speed or c_walk_speed, input_direction)
			end
		end
	end
end

function on_input(self, action_id, action)
	if action.pressed then
		if action_id == c_key_up then
			p_input.key_up = 1
		elseif action_id == c_key_left then
			p_input.key_left = 2
		elseif action_id == c_key_down then
			p_input.key_down = 3
		elseif action_id == c_key_right then
			p_input.key_right = 4
		elseif action_id == c_key_z then
			p_input.key_z = true
		elseif action_id == c_key_x then
			interact()
		elseif action_id == c_key_enter then
			if not m_dgrid.is_entity_moving(p_receiver_id) then
				m_monarch.show(c_start)
			end
		elseif action_id == c_key_lctrl then
			p_input.key_lctrl = true
		end
	elseif action.released then
		if action_id == c_key_up then
			p_input.key_up = false
		elseif action_id == c_key_left then
			p_input.key_left = false
		elseif action_id == c_key_down then
			p_input.key_down = false
		elseif action_id == c_key_right then
			p_input.key_right = false
		elseif action_id == c_key_z then
			p_input.key_z = false
		elseif action_id == c_key_lctrl then
			p_input.key_lctrl = false
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == c_set_receiver then
		p_receiver_id = message.id
	end
end